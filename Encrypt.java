
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.SecureRandom;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LENOVO
 */
public class Encrypt extends javax.swing.JFrame {

  
   public static final int SUCCESS = 0;
    public static final int SUCCESS_NOPASS = 10;
    public static final int ERR_BITCOUNT = 1;
    public static final int ERR_FILEREAD = 2;
    public static final int ERR_FILEWRITE = 3;
    public static final int ERR_NOSTEG = 4;
    public static final int ERR_LOWIMGSIZE = 5;
    public static final int ERR_NOTANIMAGE = 6;
    public static final int ERR_CIPHERFAILED = 7;
    public static final int ERR_WRONGPWD = 8;
    public static final int ERR_PASSREQ = 9;
    
    public static final int FILE = -1;
    public static final int MESSAGE = -2;
    
  

    
    /**
     * Creates new form Encrypt
     */
    private BufferedImage stegImg;
    private File fcCurDir;
    int error;
    Path txtPath, imgPath;
    Path encPath;
    
    
   public Encrypt() {
        initComponents();
        setSize(1200,650);
        fcCurDir=null;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MsgLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileTf = new javax.swing.JTextArea();
        passwordField = new javax.swing.JPasswordField();
        imgTf = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HIDE A FILE");
        getContentPane().setLayout(null);

        MsgLabel.setBackground(new java.awt.Color(0, 0, 0));
        MsgLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        MsgLabel.setForeground(new java.awt.Color(204, 204, 204));
        MsgLabel.setText("     MESSAGE");
        MsgLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        MsgLabel.setMaximumSize(new java.awt.Dimension(91, 19));
        MsgLabel.setMinimumSize(new java.awt.Dimension(91, 19));
        getContentPane().add(MsgLabel);
        MsgLabel.setBounds(120, 100, 109, 30);

        passLabel.setBackground(new java.awt.Color(0, 0, 0));
        passLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        passLabel.setForeground(new java.awt.Color(204, 204, 204));
        passLabel.setText("   PASSWORD");
        passLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        passLabel.setMaximumSize(new java.awt.Dimension(91, 19));
        passLabel.setMinimumSize(new java.awt.Dimension(91, 19));
        getContentPane().add(passLabel);
        passLabel.setBounds(120, 160, 109, 30);

        imgLabel.setBackground(new java.awt.Color(0, 0, 0));
        imgLabel.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        imgLabel.setForeground(new java.awt.Color(204, 204, 204));
        imgLabel.setText("      IMAGE");
        imgLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        imgLabel.setMaximumSize(new java.awt.Dimension(91, 19));
        imgLabel.setMinimumSize(new java.awt.Dimension(91, 19));
        getContentPane().add(imgLabel);
        imgLabel.setBounds(120, 220, 109, 30);

        fileTf.setColumns(20);
        fileTf.setRows(5);
        fileTf.setWrapStyleWord(true);
        jScrollPane1.setViewportView(fileTf);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(300, 90, 150, 50);
        getContentPane().add(passwordField);
        passwordField.setBounds(300, 160, 148, 30);
        getContentPane().add(imgTf);
        imgTf.setBounds(300, 220, 148, 31);

        jButton2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jButton2.setText("HOME");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(310, 310, 69, 30);

        jButton3.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 10)); // NOI18N
        jButton3.setText("UPLOAD");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(480, 220, 67, 31);

        jButton4.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        jButton4.setText("OK");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(180, 310, 63, 29);

        jButton5.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 10)); // NOI18N
        jButton5.setText("UPLOAD");
        jButton5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(480, 100, 67, 31);

        jLabel1.setIcon(new javax.swing.ImageIcon("D:\\project\\IMG-20190831-WA0015.jpg")); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1220, 620);

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String[] images = new String[] {".png",".jpg",".jpeg",".bmp",".gif"};
				JFileChooser fc = new JFileChooser();
				fc.setCurrentDirectory(fcCurDir);
				fc.setDialogTitle("Choose an Image");
				fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
				fc.setFileFilter(new FilterTheFiles("Image Files",images));//File type - Image files(1st parameter)
				if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION) { //Selects the particular file and displays in file name
					imgTf.setText(fc.getSelectedFile().getAbsolutePath().toString());
					//log("Top image selected: \""+fc.getSelectedFile().toString()+"\"");
                                        imgPath = Paths.get(imgTf.getText());
                                        
                                        
				}
				fcCurDir = fc.getCurrentDirectory();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String[] txt = new String[] {".txt"};
        JFileChooser fc = new JFileChooser();
				fc.setCurrentDirectory(fcCurDir);
				fc.setDialogTitle("Choose your file");
				fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                                fc.setFileFilter(new FilterTheFiles("Text Files",txt));
				if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION) {
					fileTf.setText(fc.getSelectedFile().getAbsolutePath().toString());
					//log("Bottom file selected: \""+fc.getSelectedFile().toString()+"\"");
                                        txtPath = Paths.get(fileTf.getText());
//                                        System.out.print(txtPath);
				}
				fcCurDir = fc.getCurrentDirectory();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         new Home().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       try {                                         
           // TODO add your handling code here:
           JFrame frame = new JFrame("Message");
           String pass = passwordField.getText();
           if(pass.length()==0)
           {
               JOptionPane.showMessageDialog(frame,"Enter Password");
           }
           else if(pass.length()!=4)
           {
               JOptionPane.showMessageDialog(frame,"Password should be only 4 characters");
           }
           else
           {
           
                    JOptionPane.showMessageDialog(frame,"Please wait for a while");
                    encPath =Paths.get(imgPath.getParent()+"\\enc_"+imgPath.getFileName());
                    File f = new File(encPath.toString());
                    String contentOfMessageFile = null;
                    try {
                        contentOfMessageFile = (readMessageFile()+pass);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Encrypt.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    int[] bits=bit_Msg(contentOfMessageFile);
         //        System.out.println("msg in file "+contentOfMessageFile);
         //        for(int i=0;i<bits.length;i++)
         //        System.out.print(bits[i]);
         //        System.out.println();
                 BufferedImage theImage=readImageFile(imgPath.toString());
                 try {
                     hideTheMessage(bits, theImage);
                 } catch (IOException ex) {
                     Logger.getLogger(Encrypt.class.getName()).log(Level.SEVERE, null, ex);
                 }


                 boolean result = f.createNewFile(); //creates a new file

                 JOptionPane.showMessageDialog(frame,"file created "+encPath);
                 //returns the path string




                } 
       } catch (IOException ex) {
           Logger.getLogger(Encrypt.class.getName()).log(Level.SEVERE, null, ex);
       }


        
           
    }//GEN-LAST:event_jButton4ActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encrypt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MsgLabel;
    private javax.swing.JTextArea fileTf;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JTextField imgTf;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel passLabel;
    private javax.swing.JPasswordField passwordField;
    // End of variables declaration//GEN-END:variables



    private String readMessageFile() throws FileNotFoundException {
        String contentOfMessageFile = "";
	File a = new File (txtPath.toString());
	Scanner scan = new Scanner (a);
	while (scan.hasNextLine()){
	String next = scan.nextLine();
	contentOfMessageFile += next;
	if (scan.hasNextLine()){
	contentOfMessageFile += "\n";
	}
	}
	scan.close();
	return contentOfMessageFile;
	
    }

    private int[] bit_Msg(String msg) {
        int j=0;
	int[] b_msg=new int[(msg.length()*8)];
	for(int i=0;i<msg.length();i++){
		int x=msg.charAt(i);
		String x_s=Integer.toBinaryString(x);
		while(x_s.length()!=8){
			x_s='0'+x_s;
		}
//		System.out.println("dec value for "+x +" is "+x_s);

		for(int i1=0;i1<8;i1++) {
		    b_msg[j] = Integer.parseInt(String.valueOf(x_s.charAt(i1)));
		    j++;
		  };
	}
	
	return b_msg;
    }

    private BufferedImage readImageFile(String imgString) {
        BufferedImage theImage = null;
        File p = new File (imgString);
        try{
        theImage = ImageIO.read(p);
        }catch (IOException e){
        e.printStackTrace();
        System.exit(1);
        }
        return theImage;
    }

    private void hideTheMessage(int[] bits, BufferedImage theImage) throws IOException {
        File f = new File (encPath.toString());
	BufferedImage sten_img=null;
	int bit_l=bits.length/8;
	int[] bl_msg=new int[8];
//	System.out.println("bit lent "+bit_l);
	String bl_s=Integer.toBinaryString(bit_l);
	while(bl_s.length()!=8){
		bl_s='0'+bl_s;
	}
	for(int i1=0;i1<8;i1++) {
		bl_msg[i1] = Integer.parseInt(String.valueOf(bl_s.charAt(i1)));
	  };
int j=0;
int b=0;
int currentBitEntry=8;

for (int x = 0; x < theImage.getWidth(); x++){
for ( int y = 0; y < theImage.getHeight(); y++){
	if(x==0&&y<8){
		int currentPixel = theImage.getRGB(x, y);	
		int ori=currentPixel;
		int red = currentPixel>>16;
		red = red & 255;
		int green = currentPixel>>8;
		green = green & 255;
		int blue = currentPixel;
		blue = blue & 255;
		String x_s=Integer.toBinaryString(blue);
		String sten_s=x_s.substring(0, x_s.length()-1);
		sten_s=sten_s+Integer.toString(bl_msg[b]);

		//j++;
		int temp=Integer.parseInt(sten_s,2);
		int s_pixel=Integer.parseInt(sten_s, 2);
		int a=255;
		int rgb = (a<<24) | (red<<16) | (green<<8) | s_pixel;
		theImage.setRGB(x, y, rgb);
		//System.out.println("original "+ori+" after "+theImage.getRGB(x, y));
		ImageIO.write(theImage, "png", f);
b++;

	}
	else if (currentBitEntry < bits.length+8 ){

	int currentPixel = theImage.getRGB(x, y);	
	int ori=currentPixel;
	int red = currentPixel>>16;
	red = red & 255;
	int green = currentPixel>>8;
	green = green & 255;
	int blue = currentPixel;
	blue = blue & 255;
	String x_s=Integer.toBinaryString(blue);
	String sten_s=x_s.substring(0, x_s.length()-1);
	sten_s=sten_s+Integer.toString(bits[j]);
	j++;
	int temp=Integer.parseInt(sten_s,2);
	int s_pixel=Integer.parseInt(sten_s, 2);
	
	int a=255;
	int rgb = (a<<24) | (red<<16) | (green<<8) | s_pixel;
	theImage.setRGB(x, y, rgb);
	//System.out.println("original "+ori+" after "+theImage.getRGB(x, y));
	ImageIO.write(theImage, "png", f);

	currentBitEntry++;	
	//System.out.println("curre "+currentBitEntry);
	}
    }
}
    }    }




